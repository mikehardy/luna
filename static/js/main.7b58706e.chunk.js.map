{"version":3,"sources":["index.js","App.tsx","reportWebVitals.ts","icons.js"],"names":["AppRegistry","registerComponent","appName","App","runApplication","rootTag","document","getElementById","Section","children","title","isDarkMode","style","styles","sectionContainer","sectionTitle","color","Colors","white","black","sectionDescription","light","dark","backgroundStyle","backgroundColor","darker","lighter","contentInsetAdjustmentBehavior","Header","highlight","ReloadInstructions","DebugInstructions","LearnMoreLinks","Tab","createMaterialTopTabNavigator","TopTabNavigator","insets","useSafeAreaInsets","linkTo","useLinkTo","accentColor","primaryColor","flex","screenOptions","tabBarStyle","paddingTop","top","tabBarLabelStyle","tabBarIndicatorStyle","Navigator","initialRouteName","Screen","component","name","detailsContainer","size","onPress","StyleSheet","create","alignContent","justifyContent","alignItems","marginTop","paddingHorizontal","fontSize","fontWeight","SafeAreaProvider","initialMetrics","initialWindowMetrics","NavigationContainer","linking","prefixes","config","screens","Details","Linking","Home","documentTitle","formatter","options","route","appJson","displayName","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","IconsCSS","AntDesign_ttf","Entypo_ttf","EvilIcons_ttf","Feather_ttf","FontAwesome_ttf","Fontisto_ttf","Foundation_ttf","Ionicons_ttf","MaterialIcons_ttf","MaterialCommunityIcons_ttf","Octicons_ttf","Zocial_ttf","SimpleLineIcons_ttf","createElement","type","styleSheet","cssText","appendChild","createTextNode","head"],"mappings":"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","file":"static/js/main.7b58706e.chunk.js","sourcesContent":["/**\n * When compiling for web, it will search for index.js on root/src.\n */\n\nimport {AppRegistry} from 'react-native';\nimport App from './App';\nimport {name as appName} from './app.json';\nimport reportWebVitals from './reportWebVitals';\n\n// RNVI integration for web\nimport './icons';\n\nAppRegistry.registerComponent(appName, () => App);\nAppRegistry.runApplication(appName, {\n  rootTag: document.getElementById('root'),\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * Generated with the TypeScript template\n * https://github.com/react-native-community/react-native-template-typescript\n *\n * @format\n */\n\nimport appJson from './app.json';\nimport React from 'react';\nimport {\n  Button,\n  ScrollView,\n  StyleSheet,\n  Text,\n  useColorScheme,\n  View,\n} from 'react-native';\nimport {\n  Colors,\n  DebugInstructions,\n  Header,\n  LearnMoreLinks,\n  ReloadInstructions,\n  // @ts-ignore -- these are not well typed, but are only example screens\n} from '../node_modules/react-native/Libraries/NewAppScreen';\nimport {\n  initialWindowMetrics,\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {useLinkTo} from '@react-navigation/native';\nimport {createMaterialTopTabNavigator} from '@react-navigation/material-top-tabs';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport {NavigationContainer} from '@react-navigation/native';\n\n// *****************************************************************************************************\n// This pasted directly in from this file upstream\n// https://github.com/react-native-community/react-native-template-typescript/blob/main/template/App.tsx\n// The SafeAreaView and StatusBar are commented as those characteristics are provided by react-navigation\nconst Section: React.FC<{\n  title: string;\n}> = ({children, title}) => {\n  const isDarkMode = useColorScheme() === 'dark';\n  return (\n    <View style={styles.sectionContainer}>\n      <Text\n        style={[\n          styles.sectionTitle,\n          {\n            color: isDarkMode ? Colors.white : Colors.black,\n          },\n        ]}>\n        {title}\n      </Text>\n      <Text\n        style={[\n          styles.sectionDescription,\n          {\n            color: isDarkMode ? Colors.light : Colors.dark,\n          },\n        ]}>\n        {children}\n      </Text>\n    </View>\n  );\n};\n\nconst App = () => {\n  const isDarkMode = useColorScheme() === 'dark';\n\n  const backgroundStyle = {\n    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,\n  };\n\n  return (\n    // <SafeAreaView style={backgroundStyle}> // <-- provided by react-navigation\n    // <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} /> // <-- provided by react-navigation\n    <ScrollView\n      contentInsetAdjustmentBehavior=\"automatic\"\n      style={backgroundStyle}>\n      <Header />\n      <View\n        style={{\n          backgroundColor: isDarkMode ? Colors.black : Colors.white,\n        }}>\n        <Section title=\"Step One\">\n          Edit <Text style={styles.highlight}>App.tsx</Text> to change this\n          screen and then come back to see your edits.\n        </Section>\n        <Section title=\"See Your Changes\">\n          <ReloadInstructions />\n        </Section>\n        <Section title=\"Debug\">\n          <DebugInstructions />\n        </Section>\n        <Section title=\"Learn More\">\n          Read the docs to discover what to do next:\n        </Section>\n        <LearnMoreLinks />\n      </View>\n    </ScrollView>\n    // </SafeAreaView> // <-- provided by react-navigation\n  );\n};\n\n// *****************************************************************************************************\n// The rest of the file is to set up a react-navigation and react-native-vector-icons demonstration:\nconst Tab = createMaterialTopTabNavigator();\nconst TopTabNavigator = () => {\n  // Used for status bar layout in react-navigation\n  const insets = useSafeAreaInsets();\n\n  // Allows us to use web-compatible navigation\n  const linkTo = useLinkTo();\n\n  // Dark mode theming items\n  const isDarkMode = useColorScheme() === 'dark';\n  const accentColor = isDarkMode ? Colors.lighter : Colors.darker;\n  const primaryColor = isDarkMode ? Colors.darker : Colors.lighter;\n  const backgroundStyle = {backgroundColor: primaryColor, flex: 1};\n\n  const DetailsTab = () => (\n    <View style={[backgroundStyle, styles.detailsContainer]}>\n      <Icon name=\"rocket\" size={30} color={'red'} />\n      <Text\n        style={[\n          styles.sectionTitle,\n          {\n            color: isDarkMode ? Colors.white : Colors.black,\n          },\n        ]}>\n        If you see a rocket, react-native-vector-icons is working!\n      </Text>\n    </View>\n  );\n  const LinkingExample = () => {\n    return (\n      <View style={[backgroundStyle, styles.detailsContainer]}>\n        <Button title=\"Link to Details\" onPress={() => linkTo('/details')} />\n      </View>\n    );\n  };\n\n  const screenOptions = {\n    tabBarStyle: {\n      backgroundColor: primaryColor,\n      paddingTop: insets.top,\n    },\n    tabBarLabelStyle: {color: isDarkMode ? Colors.light : Colors.dark},\n    tabBarIndicatorStyle: {backgroundColor: accentColor},\n  };\n\n  return (\n    <Tab.Navigator initialRouteName=\"Home\" screenOptions={screenOptions}>\n      <Tab.Screen component={App} key={'Home'} name={'Home'} />\n      <Tab.Screen component={DetailsTab} key={'Details'} name={'Details'} />\n      <Tab.Screen component={LinkingExample} key={'Linking'} name={'Linking'} />\n    </Tab.Navigator>\n  );\n};\n\nconst TabbedApp = () => {\n  return (\n    <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n      <NavigationContainer\n        linking={{\n          prefixes: ['plaut-ro.github.io/luna', 'localhost'],\n          config: {\n            screens: {\n              Details: 'details',\n              Linking: 'linking',\n              Home: '*', // Fall back to if no routes match\n            },\n          },\n        }}\n        documentTitle={{\n          formatter: (options, route) =>\n            `${appJson.displayName}${\n              options?.title || route?.name\n                ? ' - ' + options?.title ?? route?.name\n                : ' '\n            }`,\n        }}>\n        <TopTabNavigator />\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  detailsContainer: {\n    flex: 1,\n    alignContent: 'center',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  sectionContainer: {\n    marginTop: 32,\n    paddingHorizontal: 24,\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n  sectionDescription: {\n    marginTop: 8,\n    fontSize: 18,\n    fontWeight: '400',\n  },\n  highlight: {\n    fontWeight: '700',\n  },\n});\n\nexport default TabbedApp;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// In order to use RNVI for web, you need to consume the ttf files in your JavaScript entry point to get the bundled url and inject a style tag in your page\n// https://github.com/oblador/react-native-vector-icons#web-with-webpack\n\nimport AntDesign_ttf from 'react-native-vector-icons/Fonts/AntDesign.ttf';\nimport Entypo_ttf from 'react-native-vector-icons/Fonts/Entypo.ttf';\nimport EvilIcons_ttf from 'react-native-vector-icons/Fonts/EvilIcons.ttf';\nimport Feather_ttf from 'react-native-vector-icons/Fonts/Feather.ttf';\nimport FontAwesome_ttf from 'react-native-vector-icons/Fonts/FontAwesome.ttf';\nimport Fontisto_ttf from 'react-native-vector-icons/Fonts/Fontisto.ttf';\nimport Foundation_ttf from 'react-native-vector-icons/Fonts/Foundation.ttf';\nimport Ionicons_ttf from 'react-native-vector-icons/Fonts/Ionicons.ttf';\nimport MaterialIcons_ttf from 'react-native-vector-icons/Fonts/MaterialIcons.ttf';\nimport MaterialCommunityIcons_ttf from 'react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf';\nimport Octicons_ttf from 'react-native-vector-icons/Fonts/Octicons.ttf';\nimport Zocial_ttf from 'react-native-vector-icons/Fonts/Zocial.ttf';\nimport SimpleLineIcons_ttf from 'react-native-vector-icons/Fonts/SimpleLineIcons.ttf';\n\n// Generate required css\nconst IconsCSS = `\n@font-face {\n  src: url(${AntDesign_ttf});\n  font-family: AntDesign;\n}\n@font-face {\n  src: url(${Entypo_ttf});\n  font-family: Entypo;\n}\n@font-face {\n  src: url(${EvilIcons_ttf});\n  font-family: EvilIcons;\n}\n@font-face {\n  src: url(${Feather_ttf});\n  font-family: Feather;\n}\n@font-face {\n  src: url(${FontAwesome_ttf});\n  font-family: FontAwesome;\n}\n@font-face {\n  src: url(${Fontisto_ttf});\n  font-family: Fontisto;\n}\n@font-face {\n  src: url(${Foundation_ttf});\n  font-family: Foundation;\n}\n@font-face {\n  src: url(${Ionicons_ttf});\n  font-family: Ionicons;\n}\n@font-face {\n  src: url(${MaterialIcons_ttf});\n  font-family: Materialicons;\n}\n@font-face {\n  src: url(${MaterialCommunityIcons_ttf});\n  font-family: MaterialCommunityIcons;\n}\n@font-face {\n  src: url(${Octicons_ttf});\n  font-family: Octicons;\n}\n@font-face {\n  src: url(${Zocial_ttf});\n  font-family: Zocial;\n}\n@font-face {\n  src: url(${SimpleLineIcons_ttf});\n  font-family: SimpleLineIcons;\n}\n`;\n\n// Create stylesheet\nconst style = document.createElement('style');\nstyle.type = 'text/css';\nif (style.styleSheet) {\n  style.styleSheet.cssText = IconsCSS;\n} else {\n  style.appendChild(document.createTextNode(IconsCSS));\n}\n\n// Inject stylesheet\ndocument.head.appendChild(style);\n"],"sourceRoot":""}